// Top-level build file where you can add configuration options common to all sub-projects/modules.


buildscript {
    ext{
        // 默认的仓库地址（需翻墙）
        GOOGLE = 'https://dl.google.com/dl/android/maven2/'
        JCENTER = 'https://jcenter.bintray.com/'

        // 科达仓库地址
        KEDA_GOOGLE = 'http://172.16.6.154:9081/repository/aliyun_google/'
        KEDA_JCENTER = 'http://172.16.6.154:9081/repository/aliyun_jcenter/'
        KEDA_GRADLE_PLUGIN = 'http://172.16.6.154:9081/repository/aliyun_gradle-plugin/'
        KEDA_SNAPSHOT = 'http://172.16.6.154:9081/repository/snapshots/' // keda自己发布的snapshot版的artifacts
        KEDA_RELEASE = 'http://172.16.6.154:9081/repository/releases/' // keda自己发布的release版的artifacts
        KEDA_ALIRELEASE = 'http://172.16.6.154:9081/repository/aliyun/' // 映射到ALI_RELEASE

        // 阿里云仓库地址
        ALI_GOOGLE = 'https://maven.aliyun.com/repository/google/'
        ALI_JCENTER = 'https://maven.aliyun.com/repository/jcenter/'
        ALI_GRADLE_PLUGIN = 'https://maven.aliyun.com/repository/gradle-plugin'
        ALI_RELEASE = 'http://maven.aliyun.com/nexus/content/repositories/releases/' // 阿里自己发布的release版的artifacts，如阿里推送sdk

        // 本地私有仓库地址（用于本地测试，需先本地搭建nexus，然后启动nexus。若自行修改了nexus配置则url地址可能需要修改）
        PERSONAL_GOOGLE = 'http://localhost:8081/repository/google/'
        PERSONAL_JCENTER = 'http://localhost:8081/repository/jcenter/'
        PERSONAL_GRADLE_PLUGIN = 'http://localhost:8081/repository/gradle-plugin/'
        PERSONAL_SNAPSHOT = 'http://localhost:8081/repository/maven-snapshots/'
        PERSONAL_RELEASE = 'http://localhost:8081/repository/maven-releases/'

        // mavenLocal()的url
        MAVEN_LOCAL = "file://$System.env.HOME/.m2/repository"

        // 定义仓库类型
        REPO_PERSONAL = 1
        REPO_KEDA = 2
        REPO_INSIDE_WALL = 3
        REPO_OUTSIDE_WALL = 4
//        repo = REPO_KEDA
        repo = REPO_PERSONAL

        MYGROUP = 'com.kedacom.vconf.sdk'

        SOURCE_JAVA_VERSION = JavaVersion.VERSION_1_8
        TARGET_JAVA_VERSION = SOURCE_JAVA_VERSION
        COMPILE_SDK_VERSION = 28
        MIN_SDK_VERSION = 19
        TARGET_SDK_VERSION = COMPILE_SDK_VERSION
        ABI_FILTERS = 'armeabi-v7a'

        configRepo = {Project project, boolean forBuildscript ->
            repoMethod = forBuildscript ? buildscript.&repositories : project.&repositories
            repoMethod{
                def urlGoogle
                def urlJcenter
                def urlGradlePlugin
//                gradlePluginPortal()
                switch (repo) {
                    case REPO_INSIDE_WALL:
                        urlGoogle = ALI_GOOGLE
                        urlJcenter = ALI_JCENTER
                        urlGradlePlugin = ALI_GRADLE_PLUGIN
                        break;
                    case REPO_OUTSIDE_WALL:
                        urlGoogle = GOOGLE
                        urlJcenter = JCENTER
                        urlGradlePlugin = ALI_GRADLE_PLUGIN // XXX
                        break;
                    case REPO_KEDA:
                        urlGoogle = KEDA_GOOGLE
                        urlJcenter = KEDA_JCENTER
                        urlGradlePlugin = KEDA_GRADLE_PLUGIN
                        break;
                    case REPO_PERSONAL:
                        urlGoogle = PERSONAL_GOOGLE
                        urlJcenter = PERSONAL_JCENTER
                        urlGradlePlugin = PERSONAL_GRADLE_PLUGIN
                        break;
                    default:
                        urlGoogle = ALI_GOOGLE
                        urlJcenter = ALI_JCENTER
                        urlGradlePlugin = ALI_GRADLE_PLUGIN
                        break;
                }

//                logger.quiet("project=$project, repoType=$repoType, forBuildscript=$forBuildscript")

                maven {
                    url urlGoogle
                }
                maven {
                    url urlJcenter
                }
                maven {
                    url urlGradlePlugin
                }

                if (!forBuildscript){
                    def urlKedaSdk
                    def isSnapshot = project.version.endsWith('SNAPSHOT')
//                    logger.quiet("project name=${project.name}, version=${project.version}, isSnapshot $isSnapshot")
                    switch (repo){
                        case REPO_KEDA:
                            urlKedaSdk = isSnapshot ? KEDA_SNAPSHOT : KEDA_RELEASE
                            break;
                        case REPO_PERSONAL:
                            urlKedaSdk = isSnapshot ? PERSONAL_SNAPSHOT : PERSONAL_RELEASE
                            break;
                        default:
                            urlKedaSdk = MAVEN_LOCAL
                            break;
                    }

                    exclusiveContent {
                        forRepository {
                            maven {
                                url urlKedaSdk
                            }
                        }
                        filter {
                            includeGroup MYGROUP
                        }
                    }

                }
            }
        }

    }


    configRepo(project, true)

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.0'

        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"

        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}



subprojects {
    group = MYGROUP
    ext.publish = true
    project.afterEvaluate {
        configRepo(project, false)
        configProject(project)
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

def configProject(Project project){
//    logger.quiet("configProject $project")
    if (['annotation', 'processor'].contains(project.name)){
        project.sourceCompatibility = SOURCE_JAVA_VERSION
        project.targetCompatibility = TARGET_JAVA_VERSION
    }else{
        project.android {
            compileSdkVersion COMPILE_SDK_VERSION
            defaultConfig {
                minSdkVersion MIN_SDK_VERSION
                targetSdkVersion TARGET_SDK_VERSION
                ndk {
                    abiFilters ABI_FILTERS
                }
                buildConfigField("String", "VERSION", "\"$project.version\"")
                buildConfigField("String", "TIMESTAMP", "\"" + new Date().format("yyyy-MM-dd HH:mm") + "\"")
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            compileOptions {
                sourceCompatibility SOURCE_JAVA_VERSION
                targetCompatibility TARGET_JAVA_VERSION
            }
            lintOptions {
                checkReleaseBuilds false
                // Or, if you prefer, you can continue to check for errors in release builds,
                // but continue the build even when errors are found:
                abortOnError false
            }
        }

        // 公共依赖
        DependencyHandler dependencyHandler = project.getDependencies()
        dependencyHandler.add('implementation', dependencyHandler.module('androidx.annotation:annotation:1.1.0'))
        dependencyHandler.add('implementation', dependencyHandler.module('com.google.guava:guava:27.0.1-android'))
        dependencyHandler.add('implementation', dependencyHandler.module('com.annimon:stream:1.2.1'))
        if (!['common', 'utils', 'amulet'].contains(project.name)) {
            dependencyHandler.add('compileOnly', dependencyHandler.project('path' : ':annotation'))
            dependencyHandler.add('annotationProcessor', dependencyHandler.project('path' : ':processor'))
        }
        project.configurations.all {
            resolutionStrategy {
                // don't cache changing modules at all
                cacheChangingModulesFor 0, 'seconds'
            }
        }

        if (project.ext.publish) {
            project.apply from: new File(rootDir, "publish.gradle")
        }

    }

    project.apply plugin: "com.dorongold.task-tree"

}
