apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'

version = '1.4.2-SNAPSHOT'
android {
    defaultConfig {
        versionCode 1
        versionName "1.0"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar', "*.jar"])


//    implementation 'com.google.protobuf:protobuf-javalite:3.8.0'

//    implementation 'com.google.protobuf:protobuf-java:2.6.1'
    implementation 'com.google.protobuf:protobuf-java:3.9.2'
//    implementation 'org.webrtc:google-webrtc:1.0.+'

    compileOnly project(':annotation')
    annotationProcessor project(':processor')

    implementation 'com.kedacom.vconf.sdk:amulet:1.3.11-SNAPSHOT'
    implementation 'com.kedacom.vconf.sdk:common:1.2.0-SNAPSHOT'
    implementation 'com.kedacom.vconf.sdk:utils:1.2.0-SNAPSHOT'
}




protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}



//-> 修改WebRTC SDK实现以绕过H264硬编白名单机制（使用Transform API替换SDK中的相关方法）
//import com.android.build.api.transform.Context
//import com.android.build.api.transform.QualifiedContent
//import com.android.build.api.transform.Transform
//import com.android.build.api.transform.TransformException
//import com.android.build.api.transform.TransformInput
//import com.android.build.api.transform.TransformOutputProvider
//import org.gradle.api.logging.Logger
//
//class PatchXWalkTransform extends Transform {
//    Logger logger = null;
//
//    public PatchXWalkTransform(Logger logger) {
//        this.logger = logger
//    }
//
//    @Override
//    String getName() {
//        return "PatchXWalk"
//    }
//
//    @Override
//    Set<QualifiedContent.ContentType> getInputTypes() {
//        return Collections.singleton(QualifiedContent.DefaultContentType.CLASSES)
//    }
//
//    @Override
//    Set<QualifiedContent.Scope> getScopes() {
//        return Collections.singleton(QualifiedContent.Scope.EXTERNAL_LIBRARIES)
//    }
//
//    @Override
//    boolean isIncremental() {
//        return true
//    }
//
//    @Override
//    void transform(Context context,
//                   Collection<TransformInput> inputs,
//                   Collection<TransformInput> referencedInputs,
//                   TransformOutputProvider outputProvider,
//                   boolean isIncremental) throws IOException, TransformException, InterruptedException {
//        // We should do something here
//    }
//}
//
//// Login the transform
//android.registerTransform(new PatchXWalkTransform(logger))


