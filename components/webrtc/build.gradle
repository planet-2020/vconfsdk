apply plugin: 'com.android.library'
apply plugin: 'com.google.protobuf'

version = '8.1.5-SNAPSHOT'
android {
    defaultConfig {
        versionCode 1
        versionName "1.0"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar', "*.jar"])

    compileOnly fileTree(dir: 'libs/rtc', include: ['*.aar', "*.jar"],
            excludes: ['google-webrtc-1.0.30039-mod.aar'] // 使用m74版本
//            excludes: ['libwebrtc.aar'] // 使用30039版本（官方发布的最后一个版本，后续要使用最新sdk需要自己编译）
    )
//    implementation 'org.webrtc:google-webrtc:1.0.+'

    implementation 'com.google.protobuf:protobuf-java:3.9.2'

    api 'com.kedacom.vconf.sdk:common:2.0.4-SNAPSHOT'
    implementation 'com.kedacom.vconf.sdk:utils:1.6.7-SNAPSHOT'
    api 'com.kedacom.vconf.sdk:amulet:10.1.0-SNAPSHOT'

}



protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.8.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
            }
        }
    }
}


//gradle.taskGraph.afterTask { task ->
//    logger.quiet("task.name= ${task.name}")
//    if (task.name == 'compileJava'){
////        if (task.name == 'generateDebugProto'){
//        task.inputs.files.each{ it ->
//            logger.quiet("input ${it.absolutePath}")
//        }
//        task.outputs.files.each{ it ->
//            logger.quiet("input ${it.absolutePath}")
//        }
//    }
//}


//-> 修改WebRTC SDK实现以绕过H264硬编白名单机制（使用Transform API替换SDK中的相关方法）
//import com.android.build.api.transform.Context
//import com.android.build.api.transform.QualifiedContent
//import com.android.build.api.transform.Transform
//import com.android.build.api.transform.TransformException
//import com.android.build.api.transform.TransformInput
//import com.android.build.api.transform.TransformOutputProvider
//import org.gradle.api.logging.Logger
//
//class PatchXWalkTransform extends Transform {
//    Logger logger = null;
//
//    public PatchXWalkTransform(Logger logger) {
//        this.logger = logger
//    }
//
//    @Override
//    String getName() {
//        return "PatchXWalk"
//    }
//
//    @Override
//    Set<QualifiedContent.ContentType> getInputTypes() {
//        return Collections.singleton(QualifiedContent.DefaultContentType.CLASSES)
//    }
//
//    @Override
//    Set<QualifiedContent.Scope> getScopes() {
//        return Collections.singleton(QualifiedContent.Scope.EXTERNAL_LIBRARIES)
//    }
//
//    @Override
//    boolean isIncremental() {
//        return true
//    }
//
//    @Override
//    void transform(Context context,
//                   Collection<TransformInput> inputs,
//                   Collection<TransformInput> referencedInputs,
//                   TransformOutputProvider outputProvider,
//                   boolean isIncremental) throws IOException, TransformException, InterruptedException {
//        // We should do something here
//    }
//}
//
//// Login the transform
//android.registerTransform(new PatchXWalkTransform(logger))


