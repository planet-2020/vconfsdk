package mt;

option java_package = "com.kedacom.mt.netmanage.protobuf"; 
option java_outer_classname = "StructConfPB"; 

import "enum.proto";
import "structcommon.proto";



message  TRtcRid
{
	optional string rid=1;
	optional EmMtResolution emres =2;
	optional uint32 bitrate = 3;
}

message  TRtcMedia
{
	optional string    mid=1;
	repeated TRtcRid   ridlist=2;
	optional string    streamid=3;
}

message TRtcMedialist
{
	repeated TRtcMedia  media=1;
}

message  TRtcPlayItem
{
	optional uint64                   play_idx =1;              ///windows是句柄， 硬终端是索引

	optional bool                     is_local=2;               ///是否是本地
	optional EmCodecComponent         local_chan=3;             ///<本地码流
	optional EmCodecComponentIndex    local_chan_idx=4;         ///<本地第几路

	optional string                   streamid=5;               ///流id
	optional EmMtResolution           res = 6;                  ///订阅的分辨率
	optional bool                     is_ass=7;                 ///用于rtcmp区分， 当前的streamid是主流还是双流，进入不同的peerconnection
}

message  TRtcPlayParam
{
	optional  EmMtVmpStyle emstype= 1;
	repeated  TRtcPlayItem playlist= 2;
}

message  TRtcStream
{
	optional string               streamid=1;
	optional TMtId                mtid=2;
	optional bool                 is_audio=3;
	optional bool                 is_ass=4;
	optional uint32               media_idx=5;      ///用在多流，主1， 主2
	repeated EmMtResolution       simcast_res = 6;  ///支持的多个分辨率
}

message  TRtcStreamList
{
	repeated TRtcStream stream=1;
}


message TRtcTlsCfg
{
	optional bool	 is_use_tls = 1;
	optional string  cert_path  = 2;
	optional string  key_path   = 3;
	optional string  ca_path    = 4;
}

message TRtcVendorInfo
{
	optional uint32 vender_type = 1;
	optional string product_id  = 2;
	optional string version_id  = 3;
}

message TRtcRegAuthSet
{
	optional string 		username  = 1;
	optional string 		password  = 2;
	optional EmRtcAlgType   auth_type = 3;
}

//音频编码器统计信息
message TAgentAudEncStatistic
{
    optional uint32 index = 1; //第几路音频码流;从1开始
        optional uint32 bitrate = 2; //上行音频码率
        optional uint32 format = 3;  //音频格式，对应EmAudFormat
        optional bool enc_start = 4;   //是否开始编码
}

//音频解码器统计信息
message TAgentAudDecStatistic
{
    optional uint32 index = 1; //第几路音频码流;从1开始
        optional uint32 pkts_lose = 2; //音频丢包总数
        optional uint32 pkts_loserate = 3; //音频丢包率
        optional uint32 bitrate = 4; //下行音频码率(KB/s)
        optional uint32 format = 5;  //音频格式，对应EmAudFormat
        optional bool dec_start = 6;   //是否开始解码
}

//视频编码器统计信息
message TAgentVidEncStatistic
{
    optional uint32 index = 1; //第几路视频码流;从1开始
        optional bool video_resource_exist = 2; //有无视频源
        optional uint32 framerate = 3; //视频帧率
        optional uint32 bitrate = 4; //上行视频码率(KB/s)
        optional uint32 format = 5;  //视频格式，对应EmVidFormat
        optional uint32 resolution = 6; //分辨率 EmMtResolution
        optional bool enc_start = 7;   //是否开始编码
        optional bool hw_enc_status = 8;   //硬件编码状态
}

//视频解码器统计信息
message TAgentVidDecStatistic
{
    optional uint32 index = 1; //第几路视频码流;从1开始
        optional uint32 framerate = 2; //视频帧率
        optional uint32 pkts_lose = 3; //视频丢包总数
        optional uint32 pkts_loserate = 4; //视频丢包率
        optional uint32 bitrate = 5; //下行视频码率(KB/s)
        optional uint32 format = 6;  //视频格式，对应EmVidFormat
        optional uint32 resolution = 7; //分辨率 EmMtResolution
        optional bool dec_start = 8;   //是否开始解码
        optional bool hw_dec_status = 9;   //硬件解码状态
}

//会议统计信息
message TAgentCodecStatistic
{
    repeated TAgentAudEncStatistic audenc_statics = 1; //音频编码器统计信息
        repeated TAgentAudDecStatistic auddec_statics = 2; //音频解码器统计信息
        repeated TAgentVidEncStatistic pri_videnc_statics = 3; //主视频编码器统计信息
        repeated TAgentVidDecStatistic pri_viddec_statics = 4; //主视频解码器统计信息
        repeated TAgentVidEncStatistic ass_videnc_statics = 5; //辅视频编码器统计信息
        repeated TAgentVidDecStatistic ass_viddec_statics = 6; //辅视频解码器统计信息
}